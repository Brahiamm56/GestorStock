version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:15-alpine
    container_name: gestor_stock_db
    environment:
      POSTGRES_DB: gestor_stock
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gestor_stock_network
    restart: unless-stopped

  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gestor_stock_backend
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: gestor_stock
      DB_USER: postgres
      DB_PASSWORD: password
      PORT: 5000
      CORS_ORIGIN: http://localhost:3000
    ports:
      - "5000:5000"
    depends_on:
      - postgres
    networks:
      - gestor_stock_network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/node_modules

  # Frontend Vue.js
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: gestor_stock_frontend
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - gestor_stock_network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx (opcional para producci√≥n)
  nginx:
    image: nginx:alpine
    container_name: gestor_stock_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./frontend/dist:/usr/share/nginx/html
    depends_on:
      - frontend
      - backend
    networks:
      - gestor_stock_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:

networks:
  gestor_stock_network:
    driver: bridge
